# Docker

# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master


resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  releaseTag: '$(Build.BuildNumber)'
  serviceName: 'forex-app-service'
  serviceNameFrontEnd: 'forex-app-service-frontend'
  x86ImageName: 'emandere/$(serviceName)-x86'
  armImageName: 'emandere/$(serviceName)-arm'

  DeploymentPath: '/home/emandere/deployments/$(serviceName)/$(releaseTag)'
  GitHubDeploymentPath: 'https://raw.githubusercontent.com/emandere/$(serviceName)/master/deployment.yaml'
  GitHubSecretsPath: 'https://raw.githubusercontent.com/emandere/$(serviceName)/master/appsettings.secrets.json'
  DeploymentConfigPath: '/home/emandere/deployments/$(serviceName)/$(releaseTag)/deployment.yaml'
  DeploymentSecretsPath: '/home/emandere/deployments/$(serviceName)/$(releaseTag)/appsettings.secrets.json'
  DeploymentStatefulSet: 'https://raw.githubusercontent.com/emandere/$(serviceName)/master/MongoConfig/localStatefulSet.yml'
  DeploymentStorageClass: 'https://raw.githubusercontent.com/emandere/$(serviceName)/master/MongoConfig/localStorageClass.yml'


  DeploymentPathFrontEnd: '/home/emandere/deployments/$(serviceNameFrontEnd)/$(releaseTag)'
  GitHubDeploymentPathFrontEnd: 'https://raw.githubusercontent.com/emandere/$(serviceName)/master/deployment.frontend.yaml'
  DeploymentConfigPathFrontEnd: '/home/emandere/deployments/$(serviceNameFrontEnd)/$(releaseTag)/deployment.frontend.yaml'
  DeploymentSecretsPathFrontEnd: '/home/emandere/deployments/$(serviceNameFrontEnd)/$(releaseTag)/appsettings.secrets.json'

stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build an x86 image
      inputs:
        command: buildAndPush
        repository: $(x86ImageName)
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        containerRegistry: 'dockerhub'
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build an ARM image
      inputs:
        command: buildAndPush
        repository: $(armImageName)
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile.arm'
        containerRegistry: 'dockerhub'
        tags: |
          $(tag)
- stage: Deploy
  jobs:
    # track deployments on the environment
  - deployment: MacBook
    pool:
      name: MacPool
    # creates an environment if it doesn’t exist
    environment: '$(serviceName)'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - bash: |
                # Write your commands here

                echo $(ACCID)

                echo $(releaseTag)

                mkdir -p $(DeploymentPath)
                
                rm -f $(DeploymentPath)/*
                
                chmod 775 $(DeploymentPath)
                
                wget -q $(GitHubDeploymentPath) -P  $(DeploymentPath)

                wget -q $(GitHubSecretsPath)  -P $(DeploymentPath)

                sed -i 's@{URL}@$(URL)@'  $(DeploymentSecretsPath)

                sed -i 's/{ACCID}/$(ACCID)/'  $(DeploymentSecretsPath)

                sed -i 's/{TOKEN}/$(TOKEN)/'  $(DeploymentSecretsPath)
                
                sed -i 's/{platform}/x86/'  $(DeploymentConfigPath)
                
                sed -i 's/{buildId}/$(Build.BuildId)/'  $(DeploymentConfigPath)
                
                
              displayName: 'Set up artifacts'

            - bash: |
                # Write your commands here
                kubectl delete secret fxaccount --ignore-not-found
                kubectl create secret generic fxaccount --from-file $(DeploymentSecretsPath)

                kubectl apply -f $(DeploymentStorageClass)

                kubectl apply -f $(DeploymentStatefulSet)

                kubectl apply -f  $(DeploymentConfigPath)
              
              displayName: 'Deploy Release'
            - bash: |
                # Write your commands here
          
                kubectl rollout status deployment.v1.apps/$(serviceName)
            
              displayName: 'Verify Release'

  - deployment: AWS_ARM
    pool:
      vmImage: 'ubuntu-latest'
    environment: '$(serviceName)'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - task: SSH@0
              displayName: 'Set up release artifacts'
              
              inputs:
                sshEndpoint: 'aws-arm'
                commands: |
                  mkdir -p $(DeploymentPath)                 
                  rm -f $(DeploymentPath)/*
                  chmod 775 $(DeploymentPath)
                  wget -q $(GitHubDeploymentPath) -P  $(DeploymentPath)
                  wget -q $(GitHubSecretsPath)  -P $(DeploymentPath)
                  sed -i "s@{URL}@"$(URL_PROD)"@"  $(DeploymentSecretsPath)
                  sed -i "s/{ACCID}/"$(ACCID_PROD)"/"  $(DeploymentSecretsPath)
                  sed -i "s/{TOKEN}/"$(TOKEN_PROD)"/"  $(DeploymentSecretsPath)
                  sed -i 's/{platform}/arm/'  $(DeploymentConfigPath)
                  sed -i 's/{buildId}/$(Build.BuildId)/'  $(DeploymentConfigPath)
            - task: SSH@0
              displayName: 'Deploy new release'
              inputs:
                sshEndpoint: 'aws-arm'
                commands: |
                  k3s kubectl delete secret fxaccount --ignore-not-found
                  k3s kubectl create secret generic fxaccount --from-file $(DeploymentSecretsPath)
                  k3s kubectl apply -f  $(DeploymentConfigPath)
            - task: SSH@0
              displayName: 'Verify Release'
              inputs:
                sshEndpoint: 'aws-arm'
                commands: 'k3s kubectl rollout status deployment.v1.apps/$(serviceName)'

  - deployment: Linux_FrontEnd
    pool:
      name: MacPool
    # creates an environment if it doesn’t exist
    environment: '$(serviceName)'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - bash: |
                # Write your commands here

                echo $(releaseTag)

                mkdir -p $(DeploymentPathFrontEnd)
                
                rm -f $(DeploymentPathFrontEnd)/*
                
                chmod 775 $(DeploymentPathFrontEnd)
                
                wget -q $(GitHubDeploymentPathFrontEnd) -P  $(DeploymentPathFrontEnd)

                wget -q $(GitHubSecretsPath)  -P $(DeploymentPathFrontEnd)

                sed -i 's/{URL}/$(URL)/'  $(DeploymentSecretsPathFrontEnd)

                sed -i 's/{ACCID}/$(ACCID)/'  $(DeploymentSecretsPathFrontEnd)

                sed -i 's/{TOKEN}/$(TOKEN)/'  $(DeploymentSecretsPathFrontEnd)
                
                sed -i 's/{platform}/x86/'  $(DeploymentConfigPathFrontEnd)
                
                sed -i 's/{buildId}/$(Build.BuildId)/'  $(DeploymentConfigPathFrontEnd)
                
                
              displayName: 'Set up artifacts'

            - bash: |
                # Write your commands here

                kubectl delete secret fxaccount --ignore-not-found

                kubectl create secret generic fxaccount --from-file $(DeploymentSecretsPathFrontEnd)

                kubectl apply -f $(DeploymentStorageClass)

                kubectl apply -f $(DeploymentStatefulSet)
            
                kubectl apply -f  $(DeploymentConfigPathFrontEnd)

                
              
              displayName: 'Deploy Release'
            - bash: |
                # Write your commands here
          
                kubectl rollout status deployment.v1.apps/$(serviceNameFrontEnd)
            
              displayName: 'Verify Release'
                                
  - deployment: AWS_ARM_Frontend
    pool:
      vmImage: 'ubuntu-latest'
    environment: '$(serviceName)'
    strategy:
      # default deployment strategy
      runOnce:
        deploy:
          steps:
            - task: SSH@0
              displayName: 'Set up release artifacts'
              inputs:
                sshEndpoint: 'aws-arm'
                commands: |
                  mkdir -p $(DeploymentPathFrontEnd)
                  
                  rm -f $(DeploymentPathFrontEnd)/*
                  
                  chmod 775 $(DeploymentPathFrontEnd)
                  
                  wget -q $(GitHubDeploymentPathFrontEnd) -P  $(DeploymentPathFrontEnd)
                  
                  sed -i 's/{platform}/arm/'  $(DeploymentConfigPathFrontEnd)
                  
                  sed -i 's/{buildId}/$(Build.BuildId)/'  $(DeploymentConfigPathFrontEnd)
            - task: SSH@0
              displayName: 'Deploy new release'
              inputs:
                sshEndpoint: 'aws-arm'
                commands: 'k3s kubectl apply -f  $(DeploymentConfigPathFrontEnd)'
            - task: SSH@0
              displayName: 'Verify Release'
              inputs:
                sshEndpoint: 'aws-arm'
                commands: 'k3s kubectl rollout status deployment.v1.apps/$(serviceNameFrontEnd)'
                      